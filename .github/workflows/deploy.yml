name: Deploy to Flywheel

on:
  push:
    branches:
      - main    # Production
      - staging # Staging environment

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: 
      name: ${{ github.ref == 'refs/heads/main' && 'production' || 'staging' }}
      url: ${{ github.ref == 'refs/heads/main' && 'https://stompinggroundcomedy.org' || 'https://sg.flywheelstaging.com' }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Needed to detect file changes

      - name: Determine what to deploy
        id: deploy_check
        run: |
          # Check commit message for override flags
          COMMIT_MSG="${{ github.event.head_commit.message }}"
          echo "Commit message: $COMMIT_MSG"
          
          # Check for no-deploy flag first (highest priority)
          if [[ "$COMMIT_MSG" == *"[no-deploy]"* ]]; then
            echo "No-deploy flag detected - skipping deployment"
            echo "deploy_themes=false" >> $GITHUB_OUTPUT
            echo "deploy_plugins=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # Check for manual override flags
          if [[ "$COMMIT_MSG" == *"[deploy:all]"* ]]; then
            echo "Manual override: deploying all components"
            echo "deploy_themes=true" >> $GITHUB_OUTPUT
            echo "deploy_plugins=true" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          if [[ "$COMMIT_MSG" == *"[deploy:themes]"* ]]; then
            echo "Manual override: deploying themes only"
            echo "deploy_themes=true" >> $GITHUB_OUTPUT
            echo "deploy_plugins=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          if [[ "$COMMIT_MSG" == *"[deploy:plugins]"* ]]; then
            echo "Manual override: deploying plugins only"
            echo "deploy_themes=false" >> $GITHUB_OUTPUT
            echo "deploy_plugins=true" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # Auto-detect based on file changes
          echo "Auto-detecting changes..."
          
          # Check for theme changes
          if git diff --name-only HEAD~1 | grep -q "^themes/"; then
            echo "Theme files changed - will deploy themes"
            echo "deploy_themes=true" >> $GITHUB_OUTPUT
          else
            echo "No theme changes detected"
            echo "deploy_themes=false" >> $GITHUB_OUTPUT
          fi
          
          # Check for plugin changes
          if git diff --name-only HEAD~1 | grep -q "^plugins/"; then
            echo "Plugin files changed - will deploy plugins"
            echo "deploy_plugins=true" >> $GITHUB_OUTPUT
          else
            echo "No plugin changes detected"
            echo "deploy_plugins=false" >> $GITHUB_OUTPUT
          fi
          
          # Only deploy if there are actual changes
          if [[ "${{ steps.deploy_check.outputs.deploy_themes }}" != "true" && "${{ steps.deploy_check.outputs.deploy_plugins }}" != "true" ]]; then
            echo "No changes detected - skipping deployment"
            echo "deploy_themes=false" >> $GITHUB_OUTPUT
            echo "deploy_plugins=false" >> $GITHUB_OUTPUT
          fi
          
          echo "Deployment plan:"
          echo "- Themes: ${{ steps.deploy_check.outputs.deploy_themes }}"
          echo "- Plugins: ${{ steps.deploy_check.outputs.deploy_plugins }}"

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.1'
          tools: composer

      - name: Install Composer dependencies
        if: ${{ steps.deploy_check.outputs.deploy_themes == 'true' || steps.deploy_check.outputs.deploy_plugins == 'true' }}
        run: |
          echo "Installing Composer dependencies..."
          
          # Check if composer.json exists
          if [ ! -f "composer.json" ]; then
            echo "::warning::No composer.json found in root - skipping Composer install"
            exit 0
          fi
          
          # Try to install dependencies (permissive)
          composer install --no-dev --optimize-autoloader --verbose 2>/dev/null || {
            echo "::warning::Composer install failed - continuing with deployment"
            echo "::group::Composer Debug Info"
            composer diagnose 2>/dev/null || echo "Composer diagnose failed"
            composer show 2>/dev/null || echo "Composer show failed"
            echo "::endgroup::"
          }
          echo "Composer dependencies installation completed."

      - name: Setup Node.js
        if: ${{ steps.deploy_check.outputs.deploy_themes == 'true' || steps.deploy_check.outputs.deploy_plugins == 'true' }}
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Add Flywheel to known hosts
        run: |
          echo "Setting up SSH known hosts..."
          mkdir -p ~/.ssh
          ssh-keyscan -H ssh.getflywheel.com >> ~/.ssh/known_hosts
          chmod 600 ~/.ssh/known_hosts
          echo "SSH known hosts configured."

      - name: Test SSH Connection
        run: |
          echo "Testing SSH connection to Flywheel..."
          SSH_USER=${{ github.ref == 'refs/heads/main' && 'stompingground+stomping-ground' || 'stompingground+staging+stomping-ground' }}
          echo "Using SSH user: $SSH_USER"
          
          if ! ssh -v -o BatchMode=yes -o ConnectTimeout=5 $SSH_USER@ssh.getflywheel.com echo "SSH connection successful"; then
            echo "::error::SSH connection failed. Check SSH key and permissions."
            echo "::group::SSH Debug Info"
            ssh -v $SSH_USER@ssh.getflywheel.com
            echo "::endgroup::"
            exit 1
          fi
          echo "SSH connection successful."

      - name: Check Deployment Paths
        run: |
          SSH_USER=${{ github.ref == 'refs/heads/main' && 'stompingground+stomping-ground' || 'stompingground+staging+stomping-ground' }}
          THEMES_PATH="/www/wp-content/themes"
          PLUGINS_PATH="/www/wp-content/plugins"
          echo "Checking deployment paths..."
          
          if [[ "${{ steps.deploy_check.outputs.deploy_themes }}" == "true" ]]; then
            echo "Themes path: $THEMES_PATH"
            if ! ssh -v $SSH_USER@ssh.getflywheel.com "[ -d $THEMES_PATH ]"; then
              echo "::error::Themes directory does not exist: $THEMES_PATH"
              echo "::group::Path Debug Info"
              ssh -v $SSH_USER@ssh.getflywheel.com "ls -la /www/wp-content"
              echo "::endgroup::"
              exit 1
            fi
            echo "Themes deployment path exists and is accessible."
          fi
          
          if [[ "${{ steps.deploy_check.outputs.deploy_plugins }}" == "true" ]]; then
            echo "Plugins path: $PLUGINS_PATH"
            if ! ssh -v $SSH_USER@ssh.getflywheel.com "[ -d $PLUGINS_PATH ]"; then
              echo "::error::Plugins directory does not exist: $PLUGINS_PATH"
              echo "::group::Path Debug Info"
              ssh -v $SSH_USER@ssh.getflywheel.com "ls -la /www/wp-content"
              echo "::endgroup::"
              exit 1
            fi
            echo "Plugins deployment path exists and is accessible."
          fi

      - name: Create Pre-deployment Backup
        id: backup
        run: |
          SSH_USER=${{ github.ref == 'refs/heads/main' && 'stompingground+stomping-ground' || 'stompingground+staging+stomping-ground' }}
          TIMESTAMP=$(date +%Y%m%d_%H%M%S)
          THEMES_PATH="/www/wp-content/themes"
          PLUGINS_PATH="/www/wp-content/plugins"
          BACKUP_PATH="/tmp/backup_${TIMESTAMP}"
          
          echo "Creating pre-deployment backup at $BACKUP_PATH"
          echo "backup_path=$BACKUP_PATH" >> $GITHUB_OUTPUT
          
          # Create backup directory
          if ! ssh -v $SSH_USER@ssh.getflywheel.com "mkdir -p $BACKUP_PATH"; then
            echo "::error::Failed to create backup directory"
            exit 1
          fi
          
          # Backup themes if deploying themes
          if [[ "${{ steps.deploy_check.outputs.deploy_themes }}" == "true" ]]; then
            if ! ssh -v $SSH_USER@ssh.getflywheel.com "cp -r $THEMES_PATH $BACKUP_PATH/"; then
              echo "::warning::Themes backup creation failed - continuing with deployment"
            else
              echo "Themes backup created successfully."
            fi
          fi
          
          # Backup plugins if deploying plugins
          if [[ "${{ steps.deploy_check.outputs.deploy_plugins }}" == "true" ]]; then
            if ! ssh -v $SSH_USER@ssh.getflywheel.com "cp -r $PLUGINS_PATH $BACKUP_PATH/"; then
              echo "::warning::Plugins backup creation failed - continuing with deployment"
            else
              echo "Plugins backup created successfully."
            fi
          fi
          
          echo "Backup completed at: $BACKUP_PATH"

      - name: Security Validation - File Permissions
        run: |
          echo "Validating file permissions..."
          
          # Check for sensitive files that shouldn't be deployed
          SENSITIVE_FILES=$(find . -name ".env*" -o -name "wp-config.php" -o -name "*.key" -o -name "*.pem" | head -10)
          if [[ -n "$SENSITIVE_FILES" ]]; then
            echo "::warning::Sensitive files detected in deployment:"
            echo "$SENSITIVE_FILES"
            echo "Consider adding these to .gitignore"
          fi
          
          # Validate theme file permissions
          if [[ "${{ steps.deploy_check.outputs.deploy_themes }}" == "true" ]]; then
            echo "Checking theme file permissions..."
            find ./themes -type f -exec ls -la {} \; | head -5
          fi
          
          # Validate plugin file permissions
          if [[ "${{ steps.deploy_check.outputs.deploy_plugins }}" == "true" ]]; then
            echo "Checking plugin file permissions..."
            find ./plugins -type f -exec ls -la {} \; | head -5
          fi
          
          echo "File permission validation completed."

      - name: Security Validation - Content Checks
        run: |
          echo "Validating file content..."
          
          # Check for PHP files with potential security issues
          if [[ "${{ steps.deploy_check.outputs.deploy_themes }}" == "true" ]]; then
            echo "Scanning theme PHP files for potential issues..."
            find ./themes -name "*.php" -exec grep -l "eval\|exec\|system\|shell_exec" {} \; || echo "No suspicious functions found in themes"
          fi
          
          if [[ "${{ steps.deploy_check.outputs.deploy_plugins }}" == "true" ]]; then
            echo "Scanning plugin PHP files for potential issues..."
            find ./plugins -name "*.php" -exec grep -l "eval\|exec\|system\|shell_exec" {} \; || echo "No suspicious functions found in plugins"
          fi
          
          # Validate critical theme files
          if [[ "${{ steps.deploy_check.outputs.deploy_themes }}" == "true" ]]; then
            echo "Validating theme structure..."
            for theme_dir in ./themes/*/; do
              if [[ -d "$theme_dir" ]]; then
                theme_name=$(basename "$theme_dir")
                if [[ ! -f "$theme_dir/style.css" ]]; then
                  echo "::warning::Theme $theme_name missing style.css"
                fi
                if [[ ! -f "$theme_dir/index.php" ]]; then
                  echo "::warning::Theme $theme_name missing index.php"
                fi
              fi
            done
          fi
          
          # Validate critical plugin files
          if [[ "${{ steps.deploy_check.outputs.deploy_plugins }}" == "true" ]]; then
            echo "Validating plugin structure..."
            for plugin_dir in ./plugins/*/; do
              if [[ -d "$plugin_dir" ]]; then
                plugin_name=$(basename "$plugin_dir")
                php_files=$(find "$plugin_dir" -name "*.php" | head -1)
                if [[ -z "$php_files" ]]; then
                  echo "::warning::Plugin $plugin_name has no PHP files"
                fi
              fi
            done
          fi
          
          echo "Content validation completed."

      - name: Deploy Themes
        if: ${{ steps.deploy_check.outputs.deploy_themes == 'true' }}
        run: |
          SSH_USER=${{ github.ref == 'refs/heads/main' && 'stompingground+stomping-ground' || 'stompingground+staging+stomping-ground' }}
          THEMES_PATH="/www/wp-content/themes"
          echo "Deploying themes to $THEMES_PATH"
          
          # Deploy themes with dry-run first
          echo "Performing dry run for themes..."
          if ! rsync -avzn --update --stats \
            --exclude='node_modules' \
            --exclude='vendor' \
            --exclude='.git' \
            --exclude='*.log' \
            --exclude='.env*' \
            --exclude='.vscode' \
            --exclude='.idea' \
            --exclude='*.sublime-*' \
            --exclude='.DS_Store' \
            --exclude='Thumbs.db' \
            --exclude='tests' \
            --exclude='.phpunit.xml' \
            --exclude='phpunit.xml.dist' \
            --exclude='.cache' \
            --exclude='.parcel-cache' \
            --exclude='.webpack-cache' \
            --exclude='.sass-cache' \
            --exclude='package-lock.json' \
            --exclude='composer.lock' \
            --exclude='.gitignore' \
            --exclude='.gitattributes' \
            --exclude='README.md' \
            --exclude='webpack.config.js' \
            --exclude='postcss.config.js' \
            --exclude='tailwind.config.js' \
            --exclude='babel.config.js' \
            --exclude='.eslintrc*' \
            --exclude='.prettierrc*' \
            --exclude='.stylelintrc*' \
            --exclude='src' \
            --exclude='assets/src' \
            ./themes/ $SSH_USER@ssh.getflywheel.com:$THEMES_PATH; then
            echo "::error::Themes dry run failed"
            echo "::group::Themes Dry Run Debug Info"
            rsync -avzn --update --stats --verbose \
              --exclude='node_modules' \
              --exclude='vendor' \
              --exclude='.git' \
              --exclude='*.log' \
              --exclude='.env*' \
              --exclude='.vscode' \
              --exclude='.idea' \
              --exclude='*.sublime-*' \
              --exclude='.DS_Store' \
              --exclude='Thumbs.db' \
              --exclude='tests' \
              --exclude='.phpunit.xml' \
              --exclude='phpunit.xml.dist' \
              --exclude='.cache' \
              --exclude='.parcel-cache' \
              --exclude='.webpack-cache' \
              --exclude='.sass-cache' \
              --exclude='package-lock.json' \
              --exclude='composer.lock' \
              --exclude='.gitignore' \
              --exclude='.gitattributes' \
              --exclude='README.md' \
              --exclude='webpack.config.js' \
              --exclude='postcss.config.js' \
              --exclude='tailwind.config.js' \
              --exclude='babel.config.js' \
              --exclude='.eslintrc*' \
              --exclude='.prettierrc*' \
              --exclude='.stylelintrc*' \
              --exclude='src' \
              --exclude='assets/src' \
              ./themes/ $SSH_USER@ssh.getflywheel.com:$THEMES_PATH
            echo "::endgroup::"
            exit 1
          fi
          echo "Themes dry run successful."
          
          # Actual themes deployment
          echo "Starting actual themes deployment..."
          if ! rsync -avz --update --stats \
            --exclude='node_modules' \
            --exclude='vendor' \
            --exclude='.git' \
            --exclude='*.log' \
            --exclude='.env*' \
            --exclude='.vscode' \
            --exclude='.idea' \
            --exclude='*.sublime-*' \
            --exclude='.DS_Store' \
            --exclude='Thumbs.db' \
            --exclude='tests' \
            --exclude='.phpunit.xml' \
            --exclude='phpunit.xml.dist' \
            --exclude='.cache' \
            --exclude='.parcel-cache' \
            --exclude='.webpack-cache' \
            --exclude='.sass-cache' \
            --exclude='package-lock.json' \
            --exclude='composer.lock' \
            --exclude='.gitignore' \
            --exclude='.gitattributes' \
            --exclude='README.md' \
            --exclude='webpack.config.js' \
            --exclude='postcss.config.js' \
            --exclude='tailwind.config.js' \
            --exclude='babel.config.js' \
            --exclude='.eslintrc*' \
            --exclude='.prettierrc*' \
            --exclude='.stylelintrc*' \
            --exclude='src' \
            --exclude='assets/src' \
            ./themes/ $SSH_USER@ssh.getflywheel.com:$THEMES_PATH; then
            echo "::error::Themes deployment failed"
            echo "::group::Themes Deployment Debug Info"
            rsync -avz --update --stats --verbose \
              --exclude='node_modules' \
              --exclude='vendor' \
              --exclude='.git' \
              --exclude='*.log' \
              --exclude='.env*' \
              --exclude='.vscode' \
              --exclude='.idea' \
              --exclude='*.sublime-*' \
              --exclude='.DS_Store' \
              --exclude='Thumbs.db' \
              --exclude='tests' \
              --exclude='.phpunit.xml' \
              --exclude='phpunit.xml.dist' \
              --exclude='.cache' \
              --exclude='.parcel-cache' \
              --exclude='.webpack-cache' \
              --exclude='.sass-cache' \
              --exclude='package-lock.json' \
              --exclude='composer.lock' \
              --exclude='.gitignore' \
              --exclude='.gitattributes' \
              --exclude='README.md' \
              --exclude='webpack.config.js' \
              --exclude='postcss.config.js' \
              --exclude='tailwind.config.js' \
              --exclude='babel.config.js' \
              --exclude='.eslintrc*' \
              --exclude='.prettierrc*' \
              --exclude='.stylelintrc*' \
              --exclude='src' \
              --exclude='assets/src' \
              ./themes/ $SSH_USER@ssh.getflywheel.com:$THEMES_PATH
            echo "::endgroup::"
            exit 1
          fi
          echo "Themes deployment completed successfully."

      - name: Deploy Plugins
        if: ${{ steps.deploy_check.outputs.deploy_plugins == 'true' }}
        run: |
          SSH_USER=${{ github.ref == 'refs/heads/main' && 'stompingground+stomping-ground' || 'stompingground+staging+stomping-ground' }}
          PLUGINS_PATH="/www/wp-content/plugins"
          echo "Deploying plugins to $PLUGINS_PATH"
          
          # Deploy plugins with dry-run first
          echo "Performing dry run for plugins..."
          if ! rsync -avzn --update --stats \
            --exclude='node_modules' \
            --exclude='vendor' \
            --exclude='.git' \
            --exclude='*.log' \
            --exclude='.env*' \
            --exclude='.vscode' \
            --exclude='.idea' \
            --exclude='*.sublime-*' \
            --exclude='.DS_Store' \
            --exclude='Thumbs.db' \
            --exclude='tests' \
            --exclude='.phpunit.xml' \
            --exclude='phpunit.xml.dist' \
            --exclude='.cache' \
            --exclude='.parcel-cache' \
            --exclude='.webpack-cache' \
            --exclude='.sass-cache' \
            --exclude='package-lock.json' \
            --exclude='composer.lock' \
            --exclude='.gitignore' \
            --exclude='.gitattributes' \
            --exclude='README.md' \
            --exclude='webpack.config.js' \
            --exclude='postcss.config.js' \
            --exclude='tailwind.config.js' \
            --exclude='babel.config.js' \
            --exclude='.eslintrc*' \
            --exclude='.prettierrc*' \
            --exclude='.stylelintrc*' \
            --exclude='src' \
            --exclude='assets/src' \
            ./plugins/ $SSH_USER@ssh.getflywheel.com:$PLUGINS_PATH; then
            echo "::error::Plugins dry run failed"
            echo "::group::Plugins Dry Run Debug Info"
            rsync -avzn --update --stats --verbose \
              --exclude='node_modules' \
              --exclude='vendor' \
              --exclude='.git' \
              --exclude='*.log' \
              --exclude='.env*' \
              --exclude='.vscode' \
              --exclude='.idea' \
              --exclude='*.sublime-*' \
              --exclude='.DS_Store' \
              --exclude='Thumbs.db' \
              --exclude='tests' \
              --exclude='.phpunit.xml' \
              --exclude='phpunit.xml.dist' \
              --exclude='.cache' \
              --exclude='.parcel-cache' \
              --exclude='.webpack-cache' \
              --exclude='.sass-cache' \
              --exclude='package-lock.json' \
              --exclude='composer.lock' \
              --exclude='.gitignore' \
              --exclude='.gitattributes' \
              --exclude='README.md' \
              --exclude='webpack.config.js' \
              --exclude='postcss.config.js' \
              --exclude='tailwind.config.js' \
              --exclude='babel.config.js' \
              --exclude='.eslintrc*' \
              --exclude='.prettierrc*' \
              --exclude='.stylelintrc*' \
              --exclude='src' \
              --exclude='assets/src' \
              ./plugins/ $SSH_USER@ssh.getflywheel.com:$PLUGINS_PATH
            echo "::endgroup::"
            exit 1
          fi
          echo "Plugins dry run successful."
          
          # Actual plugins deployment
          echo "Starting actual plugins deployment..."
          if ! rsync -avz --update --stats \
            --exclude='node_modules' \
            --exclude='vendor' \
            --exclude='.git' \
            --exclude='*.log' \
            --exclude='.env*' \
            --exclude='.vscode' \
            --exclude='.idea' \
            --exclude='*.sublime-*' \
            --exclude='.DS_Store' \
            --exclude='Thumbs.db' \
            --exclude='tests' \
            --exclude='.phpunit.xml' \
            --exclude='phpunit.xml.dist' \
            --exclude='.cache' \
            --exclude='.parcel-cache' \
            --exclude='.webpack-cache' \
            --exclude='.sass-cache' \
            --exclude='package-lock.json' \
            --exclude='composer.lock' \
            --exclude='.gitignore' \
            --exclude='.gitattributes' \
            --exclude='README.md' \
            --exclude='webpack.config.js' \
            --exclude='postcss.config.js' \
            --exclude='tailwind.config.js' \
            --exclude='babel.config.js' \
            --exclude='.eslintrc*' \
            --exclude='.prettierrc*' \
            --exclude='.stylelintrc*' \
            --exclude='src' \
            --exclude='assets/src' \
            ./plugins/ $SSH_USER@ssh.getflywheel.com:$PLUGINS_PATH; then
            echo "::error::Plugins deployment failed"
            echo "::group::Plugins Deployment Debug Info"
            rsync -avz --update --stats --verbose \
              --exclude='node_modules' \
              --exclude='vendor' \
              --exclude='.git' \
              --exclude='*.log' \
              --exclude='.env*' \
              --exclude='.vscode' \
              --exclude='.idea' \
              --exclude='*.sublime-*' \
              --exclude='.DS_Store' \
              --exclude='Thumbs.db' \
              --exclude='tests' \
              --exclude='.phpunit.xml' \
              --exclude='phpunit.xml.dist' \
              --exclude='.cache' \
              --exclude='.parcel-cache' \
              --exclude='.webpack-cache' \
              --exclude='.sass-cache' \
              --exclude='package-lock.json' \
              --exclude='composer.lock' \
              --exclude='.gitignore' \
              --exclude='.gitattributes' \
              --exclude='README.md' \
              --exclude='webpack.config.js' \
              --exclude='postcss.config.js' \
              --exclude='tailwind.config.js' \
              --exclude='babel.config.js' \
              --exclude='.eslintrc*' \
              --exclude='.prettierrc*' \
              --exclude='.stylelintrc*' \
              --exclude='src' \
              --exclude='assets/src' \
              ./plugins/ $SSH_USER@ssh.getflywheel.com:$PLUGINS_PATH
            echo "::endgroup::"
            exit 1
          fi
          echo "Plugins deployment completed successfully."

      - name: Post-deployment Security Validation
        run: |
          SSH_USER=${{ github.ref == 'refs/heads/main' && 'stompingground+stomping-ground' || 'stompingground+staging+stomping-ground' }}
          THEMES_PATH="/www/wp-content/themes"
          PLUGINS_PATH="/www/wp-content/plugins"
          echo "Performing post-deployment security validation..."
          
          # Check file permissions on server
          if [[ "${{ steps.deploy_check.outputs.deploy_themes }}" == "true" ]]; then
            echo "Checking deployed theme file permissions..."
            ssh -v $SSH_USER@ssh.getflywheel.com "find $THEMES_PATH -type f -exec ls -la {} \;" | head -5
          fi
          
          if [[ "${{ steps.deploy_check.outputs.deploy_plugins }}" == "true" ]]; then
            echo "Checking deployed plugin file permissions..."
            ssh -v $SSH_USER@ssh.getflywheel.com "find $PLUGINS_PATH -type f -exec ls -la {} \;" | head -5
          fi
          
          echo "Post-deployment validation completed."

      - name: Verify Deployment
        run: |
          SSH_USER=${{ github.ref == 'refs/heads/main' && 'stompingground+stomping-ground' || 'stompingground+staging+stomping-ground' }}
          THEMES_PATH="/www/wp-content/themes"
          PLUGINS_PATH="/www/wp-content/plugins"
          echo "Verifying deployment..."
          
          # Check themes if deployed
          if [[ "${{ steps.deploy_check.outputs.deploy_themes }}" == "true" ]]; then
            echo "Checking theme files..."
            if ! ssh -v $SSH_USER@ssh.getflywheel.com "ls -d $THEMES_PATH/*/ 2>/dev/null | head -1"; then
              echo "::error::No theme directories found"
              echo "::group::Theme Check Debug Info"
              ssh -v $SSH_USER@ssh.getflywheel.com "ls -la $THEMES_PATH"
              echo "::endgroup::"
              exit 1
            fi
            
            if ! ssh -v $SSH_USER@ssh.getflywheel.com "find $THEMES_PATH -name 'style.css' -type f | head -1"; then
              echo "::error::No style.css files found in themes"
              echo "::group::Theme File Check Debug Info"
              ssh -v $SSH_USER@ssh.getflywheel.com "find $THEMES_PATH -type f -name '*.css'"
              echo "::endgroup::"
              exit 1
            fi
            echo "Theme verification successful."
          fi
          
          # Check plugins if deployed
          if [[ "${{ steps.deploy_check.outputs.deploy_plugins }}" == "true" ]]; then
            echo "Checking plugin files..."
            if ! ssh -v $SSH_USER@ssh.getflywheel.com "ls -d $PLUGINS_PATH/*/ 2>/dev/null | head -1"; then
              echo "::error::No plugin directories found"
              echo "::group::Plugin Check Debug Info"
              ssh -v $SSH_USER@ssh.getflywheel.com "ls -la $PLUGINS_PATH"
              echo "::endgroup::"
              exit 1
            fi
            echo "Plugin verification successful."
          fi
          
          echo "All deployed components verified successfully."

      - name: Rollback on Failure
        if: failure()
        run: |
          SSH_USER=${{ github.ref == 'refs/heads/main' && 'stompingground+stomping-ground' || 'stompingground+staging+stomping-ground' }}
          BACKUP_PATH="${{ steps.backup.outputs.backup_path }}"
          THEMES_PATH="/www/wp-content/themes"
          PLUGINS_PATH="/www/wp-content/plugins"
          
          echo "::error::Deployment failed! Initiating rollback..."
          echo "Rolling back from backup: $BACKUP_PATH"
          
          # Rollback themes if they were deployed
          if [[ "${{ steps.deploy_check.outputs.deploy_themes }}" == "true" ]]; then
            echo "Rolling back themes..."
            if ssh -v $SSH_USER@ssh.getflywheel.com "[ -d $BACKUP_PATH/themes ]"; then
              if ssh -v $SSH_USER@ssh.getflywheel.com "rm -rf $THEMES_PATH && cp -r $BACKUP_PATH/themes $THEMES_PATH"; then
                echo "Theme rollback successful."
              else
                echo "::error::Theme rollback failed!"
              fi
            else
              echo "::warning::No theme backup found for rollback"
            fi
          fi
          
          # Rollback plugins if they were deployed
          if [[ "${{ steps.deploy_check.outputs.deploy_plugins }}" == "true" ]]; then
            echo "Rolling back plugins..."
            if ssh -v $SSH_USER@ssh.getflywheel.com "[ -d $BACKUP_PATH/plugins ]"; then
              if ssh -v $SSH_USER@ssh.getflywheel.com "rm -rf $PLUGINS_PATH && cp -r $BACKUP_PATH/plugins $PLUGINS_PATH"; then
                echo "Plugin rollback successful."
              else
                echo "::error::Plugin rollback failed!"
              fi
            else
              echo "::warning::No plugin backup found for rollback"
            fi
          fi
          
          echo "Rollback completed. Previous version restored."

      - name: Cleanup Backup
        if: always()
        run: |
          SSH_USER=${{ github.ref == 'refs/heads/main' && 'stompingground+stomping-ground' || 'stompingground+staging+stomping-ground' }}
          BACKUP_PATH="${{ steps.backup.outputs.backup_path }}"
          
          if [[ -n "$BACKUP_PATH" ]]; then
            echo "Cleaning up backup: $BACKUP_PATH"
            ssh -v $SSH_USER@ssh.getflywheel.com "rm -rf $BACKUP_PATH" || echo "Backup cleanup failed (non-critical)"
          fi 