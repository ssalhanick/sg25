name: Deploy to Flywheel

on:
  push:
    branches:
      - production    # Production (live)
      - staging       # Staging (pre-production)
  pull_request:
    branches:
      - production    # PR to production
      - staging       # PR to staging

# main is now a stable dev branch and does not trigger deployment

jobs:
  # Initial setup and change detection
  setup:
    runs-on: ubuntu-latest
    outputs:
      deploy_themes: ${{ steps.deploy_check.outputs.deploy_themes }}
      deploy_plugins: ${{ steps.deploy_check.outputs.deploy_plugins }}
      changed_themes: ${{ steps.deploy_check.outputs.changed_themes }}
      changed_plugins: ${{ steps.deploy_check.outputs.changed_plugins }}
      ssh_user: ${{ steps.ssh_setup.outputs.ssh_user }}
      backup_path: ${{ steps.backup.outputs.backup_path }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Needed to detect file changes

      - name: Determine what to deploy
        id: deploy_check
        run: |
          # Check commit message for override flags
          COMMIT_MSG="${{ github.event.head_commit.message }}"
          echo "Commit message: $COMMIT_MSG"
          
          # Check for no-deploy flag first (highest priority)
          if [[ "$COMMIT_MSG" == *"[no-deploy]"* ]]; then
            echo "No-deploy flag detected - skipping deployment"
            echo "deploy_themes=false" >> $GITHUB_OUTPUT
            echo "deploy_plugins=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # Check for manual override flags
          if [[ "$COMMIT_MSG" == *"[deploy:all]"* ]]; then
            echo "Manual override: deploying all components"
            echo "deploy_themes=true" >> $GITHUB_OUTPUT
            echo "deploy_plugins=true" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          if [[ "$COMMIT_MSG" == *"[deploy:themes]"* ]]; then
            echo "Manual override: deploying themes only"
            echo "deploy_themes=true" >> $GITHUB_OUTPUT
            echo "deploy_plugins=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          if [[ "$COMMIT_MSG" == *"[deploy:plugins]"* ]]; then
            echo "Manual override: deploying plugins only"
            echo "deploy_themes=false" >> $GITHUB_OUTPUT
            echo "deploy_plugins=true" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # Auto-detect based on file changes
          echo "Auto-detecting changes..."
          
          # Get list of changed files
          CHANGED_FILES=$(git diff --name-only HEAD~1)
          echo "Changed files:"
          echo "$CHANGED_FILES"
          
          # Detect which themes have changes
          CHANGED_THEMES=""
          for theme_dir in themes/*/; do
            if [ -d "$theme_dir" ]; then
              theme_name=$(basename "$theme_dir")
              if echo "$CHANGED_FILES" | grep -q "^themes/$theme_name/"; then
                CHANGED_THEMES="$CHANGED_THEMES $theme_name"
              fi
            fi
          done
          
          # Detect which plugins have changes
          CHANGED_PLUGINS=""
          for plugin_dir in plugins/*/; do
            if [ -d "$plugin_dir" ]; then
              plugin_name=$(basename "$plugin_dir")
              if echo "$CHANGED_FILES" | grep -q "^plugins/$plugin_name/"; then
                CHANGED_PLUGINS="$CHANGED_PLUGINS $plugin_name"
              fi
            fi
          done
          
          # Set deployment flags based on detected changes
          if [[ -n "$CHANGED_THEMES" ]]; then
            echo "Themes with changes: $CHANGED_THEMES"
            echo "deploy_themes=true" >> $GITHUB_OUTPUT
            echo "changed_themes=$CHANGED_THEMES" >> $GITHUB_OUTPUT
          else
            echo "No theme changes detected"
            echo "deploy_themes=false" >> $GITHUB_OUTPUT
          fi
          
          if [[ -n "$CHANGED_PLUGINS" ]]; then
            echo "Plugins with changes: $CHANGED_PLUGINS"
            echo "deploy_plugins=true" >> $GITHUB_OUTPUT
            echo "changed_plugins=$CHANGED_PLUGINS" >> $GITHUB_OUTPUT
          else
            echo "No plugin changes detected"
            echo "deploy_plugins=false" >> $GITHUB_OUTPUT
          fi
          
          # Only deploy if there are actual changes
          if [[ -z "$CHANGED_THEMES" && -z "$CHANGED_PLUGINS" ]]; then
            echo "No changes detected - skipping deployment"
            echo "deploy_themes=false" >> $GITHUB_OUTPUT
            echo "deploy_plugins=false" >> $GITHUB_OUTPUT
          fi
          
          echo "Deployment plan:"
          echo "- Themes: ${{ steps.deploy_check.outputs.deploy_themes }}"
          echo "- Plugins: ${{ steps.deploy_check.outputs.deploy_plugins }}"
          if [[ "${{ steps.deploy_check.outputs.deploy_themes }}" == "true" ]]; then
            echo "- Changed themes: ${{ steps.deploy_check.outputs.changed_themes }}"
          fi
          if [[ "${{ steps.deploy_check.outputs.deploy_plugins }}" == "true" ]]; then
            echo "- Changed plugins: ${{ steps.deploy_check.outputs.changed_plugins }}"
          fi

      - name: Setup SSH and Backup
        id: ssh_setup
        run: |
          SSH_USER=${{ github.event_name == 'pull_request' && (github.base_ref == 'production' && 'stompingground+stomping-ground' || 'stompingground+staging+stomping-ground') || (github.ref == 'refs/heads/production' && 'stompingground+stomping-ground' || 'stompingground+staging+stomping-ground') }}
          echo "ssh_user=$SSH_USER" >> $GITHUB_OUTPUT
          
          # Setup SSH
          mkdir -p ~/.ssh
          ssh-keyscan -H ssh.getflywheel.com >> ~/.ssh/known_hosts
          chmod 600 ~/.ssh/known_hosts
          
          # Test SSH connection
          if ! ssh -o BatchMode=yes -o ConnectTimeout=5 $SSH_USER@ssh.getflywheel.com echo "SSH connection successful"; then
            echo "::error::SSH connection failed"
            exit 1
          fi
          
          # Create backup if needed
          if [[ "${{ steps.deploy_check.outputs.deploy_themes }}" == "true" || "${{ steps.deploy_check.outputs.deploy_plugins }}" == "true" ]]; then
            TIMESTAMP=$(date +%Y%m%d_%H%M%S)
            BACKUP_PATH="/tmp/backup_${TIMESTAMP}"
            
            echo "Creating pre-deployment backup at $BACKUP_PATH"
            echo "backup_path=$BACKUP_PATH" >> $GITHUB_OUTPUT
            
            # Create backup directory
            if ! ssh $SSH_USER@ssh.getflywheel.com "mkdir -p $BACKUP_PATH"; then
              echo "::error::Failed to create backup directory"
              exit 1
            fi
            
            # Backup only changed themes
            if [[ "${{ steps.deploy_check.outputs.deploy_themes }}" == "true" ]]; then
              echo "Backing up changed themes..."
              for theme_name in ${{ steps.deploy_check.outputs.changed_themes }}; do
                echo "Backing up theme: $theme_name"
                if ! ssh $SSH_USER@ssh.getflywheel.com "cp -r /www/wp-content/themes/$theme_name $BACKUP_PATH/ 2>/dev/null"; then
                  echo "::warning::Failed to backup theme $theme_name - continuing with deployment"
                else
                  echo "Theme $theme_name backed up successfully."
                fi
              done
            fi
            
            # Backup only changed plugins
            if [[ "${{ steps.deploy_check.outputs.deploy_plugins }}" == "true" ]]; then
              echo "Backing up changed plugins..."
              for plugin_name in ${{ steps.deploy_check.outputs.changed_plugins }}; do
                echo "Backing up plugin: $plugin_name"
                if ! ssh $SSH_USER@ssh.getflywheel.com "cp -r /www/wp-content/plugins/$plugin_name $BACKUP_PATH/ 2>/dev/null"; then
                  echo "::warning::Failed to backup plugin $plugin_name - continuing with deployment"
                else
                  echo "Plugin $plugin_name backed up successfully."
                fi
              done
            fi
            
            echo "Backup completed at: $BACKUP_PATH"
          fi

  # Parallel job for themes
  deploy-themes:
    needs: setup
    if: ${{ needs.setup.outputs.deploy_themes == 'true' }}
    runs-on: ubuntu-latest
    environment: 
      name: ${{ github.event_name == 'pull_request' && (github.base_ref == 'production' && 'production' || 'staging') || (github.ref == 'refs/heads/production' && 'production' || 'staging') }}
      url: ${{ github.event_name == 'pull_request' && (github.base_ref == 'production' && 'https://stompinggroundcomedy.org' || 'https://sg.flywheelstaging.com') || (github.ref == 'refs/heads/production' && 'https://stompinggroundcomedy.org' || 'https://sg.flywheelstaging.com') }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Add Flywheel to known hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ssh.getflywheel.com >> ~/.ssh/known_hosts
          chmod 600 ~/.ssh/known_hosts

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.1'
          tools: composer

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      - name: Cache Composer dependencies
        uses: actions/cache@v3
        with:
          path: ~/.composer/cache
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-

      - name: Build themes
        run: |
          echo "=== Building Changed Themes ==="
          
          # Function to build a component with robust error handling
          build_component() {
            local component_type=$1
            local component_name=$2
            local component_path=$3
            
            echo "Building $component_type: $component_name"
            cd "$component_path"
            
            # Install Composer dependencies if composer.json exists
            if [ -f "composer.json" ]; then
              echo "Installing Composer dependencies for $component_name..."
              if ! composer install --no-dev --optimize-autoloader --no-interaction --no-progress; then
                echo "::error::Composer install failed for $component_name"
                return 1
              fi
              echo "Composer dependencies installed successfully for $component_name"
            fi
            
            # Install npm dependencies if package.json exists
            if [ -f "package.json" ]; then
              echo "Installing npm dependencies for $component_name..."
              
              # Try multiple npm install approaches with optimizations
              if npm ci --silent --prefer-offline --no-audit; then
                echo "npm ci successful"
              elif npm install --silent --prefer-offline --no-audit --no-optional; then
                echo "npm install successful"
              else
                echo "::error::npm install failed for $component_name"
                return 1
              fi
              echo "npm dependencies installed successfully for $component_name"
            fi
            
            # Determine build tool and run build
            echo "Detecting build tool for $component_name..."
            if [ -f "webpack.config.js" ]; then
              echo "Using webpack for $component_name"
              if ! npm run prod 2>/dev/null; then
                if ! npm run build:prod 2>/dev/null; then
                  if ! npm run build:production 2>/dev/null; then
                    if ! npm run build 2>/dev/null; then
                      echo "::error::No working build script found for $component_name"
                      return 1
                    fi
                  fi
                fi
              fi
            elif [ -f "gulpfile.js" ]; then
              echo "Using gulp for $component_name"
              if ! npm run build 2>/dev/null; then
                if ! gulp build 2>/dev/null; then
                  echo "::error::Gulp build failed for $component_name"
                  return 1
                fi
              fi
            elif [ -f "vite.config.js" ]; then
              echo "Using vite for $component_name"
              if ! npm run build 2>/dev/null; then
                if ! npx vite build 2>/dev/null; then
                  echo "::error::Vite build failed for $component_name"
                  return 1
                fi
              fi
            else
              # Try generic build scripts
              echo "Using generic build scripts for $component_name"
              if ! npm run prod 2>/dev/null; then
                if ! npm run build:prod 2>/dev/null; then
                  if ! npm run build:production 2>/dev/null; then
                    if ! npm run build 2>/dev/null; then
                      echo "::warning::No build script found for $component_name - skipping build"
                      return 0
                    fi
                  fi
                fi
              fi
            fi
            
            echo "Build completed successfully for $component_name"
            cd ../..
            return 0
          }
          
          # Build changed themes
          echo "Building changed themes..."
          for theme_name in ${{ needs.setup.outputs.changed_themes }}; do
            theme_path="themes/$theme_name"
            if [ -d "$theme_path" ]; then
              # Skip WordPress default themes
              if [[ "$theme_name" =~ ^(twentytwenty|twentytwentyone|twentytwentytwo|twentytwentythree|twentytwentyfour)$ ]]; then
                echo "Skipping WordPress default theme: $theme_name"
                continue
              fi
              
              if ! build_component "theme" "$theme_name" "$theme_path"; then
                echo "::error::Theme build failed for $theme_name"
                exit 1
              fi
            fi
          done
          
          echo "=== Theme Build Process Completed Successfully ==="

      - name: Deploy themes
        run: |
          SSH_USER="${{ needs.setup.outputs.ssh_user }}"
          THEMES_PATH="/www/wp-content/themes"
          echo "Deploying themes to $THEMES_PATH"
          
          # Deploy themes with dry-run first
          echo "Performing dry run for themes..."
          if ! rsync -avzn --update --stats \
            --include='composer.json' \
            --exclude='node_modules' \
            --exclude='.git' \
            --exclude='*.log' \
            --exclude='.env*' \
            --exclude='.vscode' \
            --exclude='.idea' \
            --exclude='*.sublime-*' \
            --exclude='.DS_Store' \
            --exclude='Thumbs.db' \
            --exclude='tests' \
            --exclude='.phpunit.xml' \
            --exclude='phpunit.xml.dist' \
            --exclude='.cache' \
            --exclude='.parcel-cache' \
            --exclude='.webpack-cache' \
            --exclude='.sass-cache' \
            --exclude='package-lock.json' \
            --exclude='composer.lock' \
            --exclude='.gitignore' \
            --exclude='.gitattributes' \
            --exclude='README.md' \
            --exclude='webpack.config.js' \
            --exclude='postcss.config.js' \
            --exclude='tailwind.config.js' \
            --exclude='babel.config.js' \
            --exclude='.eslintrc*' \
            --exclude='.prettierrc*' \
            --exclude='.stylelintrc*' \
            --exclude='src' \
            --exclude='assets/src' \
            ./themes/ $SSH_USER@ssh.getflywheel.com:$THEMES_PATH; then
            echo "::error::Themes dry run failed"
            exit 1
          fi
          echo "Themes dry run successful."
          
          # Actual themes deployment
          echo "Starting actual themes deployment..."
          if ! rsync -avz --update --stats --compress --partial \
            --include='composer.json' \
            --exclude='node_modules' \
            --exclude='.git' \
            --exclude='*.log' \
            --exclude='.env*' \
            --exclude='.vscode' \
            --exclude='.idea' \
            --exclude='*.sublime-*' \
            --exclude='.DS_Store' \
            --exclude='Thumbs.db' \
            --exclude='tests' \
            --exclude='.phpunit.xml' \
            --exclude='phpunit.xml.dist' \
            --exclude='.cache' \
            --exclude='.parcel-cache' \
            --exclude='.webpack-cache' \
            --exclude='.sass-cache' \
            --exclude='package-lock.json' \
            --exclude='composer.lock' \
            --exclude='.gitignore' \
            --exclude='.gitattributes' \
            --exclude='README.md' \
            --exclude='webpack.config.js' \
            --exclude='postcss.config.js' \
            --exclude='tailwind.config.js' \
            --exclude='babel.config.js' \
            --exclude='.eslintrc*' \
            --exclude='.prettierrc*' \
            --exclude='.stylelintrc*' \
            --exclude='src' \
            --exclude='assets/src' \
            ./themes/ $SSH_USER@ssh.getflywheel.com:$THEMES_PATH; then
            echo "::error::Themes deployment failed"
            exit 1
          fi
          echo "Themes deployment completed successfully."

  # Parallel job for plugins
  deploy-plugins:
    needs: setup
    if: ${{ needs.setup.outputs.deploy_plugins == 'true' }}
    runs-on: ubuntu-latest
    environment: 
      name: ${{ github.event_name == 'pull_request' && (github.base_ref == 'production' && 'production' || 'staging') || (github.ref == 'refs/heads/production' && 'production' || 'staging') }}
      url: ${{ github.event_name == 'pull_request' && (github.base_ref == 'production' && 'https://stompinggroundcomedy.org' || 'https://sg.flywheelstaging.com') || (github.ref == 'refs/heads/production' && 'https://stompinggroundcomedy.org' || 'https://sg.flywheelstaging.com') }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Add Flywheel to known hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ssh.getflywheel.com >> ~/.ssh/known_hosts
          chmod 600 ~/.ssh/known_hosts

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.1'
          tools: composer

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      - name: Cache Composer dependencies
        uses: actions/cache@v3
        with:
          path: ~/.composer/cache
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-

      - name: Build plugins
        run: |
          echo "=== Building Changed Plugins ==="
          
          # Function to build a component with robust error handling
          build_component() {
            local component_type=$1
            local component_name=$2
            local component_path=$3
            
            echo "Building $component_type: $component_name"
            cd "$component_path"
            
            # Install Composer dependencies if composer.json exists
            if [ -f "composer.json" ]; then
              echo "Installing Composer dependencies for $component_name..."
              if ! composer install --no-dev --optimize-autoloader --no-interaction --no-progress; then
                echo "::error::Composer install failed for $component_name"
                return 1
              fi
              echo "Composer dependencies installed successfully for $component_name"
            fi
            
            # Install npm dependencies if package.json exists
            if [ -f "package.json" ]; then
              echo "Installing npm dependencies for $component_name..."
              
              # Try multiple npm install approaches with optimizations
              if npm ci --silent --prefer-offline --no-audit; then
                echo "npm ci successful"
              elif npm install --silent --prefer-offline --no-audit --no-optional; then
                echo "npm install successful"
              else
                echo "::error::npm install failed for $component_name"
                return 1
              fi
              echo "npm dependencies installed successfully for $component_name"
            fi
            
            # Determine build tool and run build
            echo "Detecting build tool for $component_name..."
            if [ -f "webpack.config.js" ]; then
              echo "Using webpack for $component_name"
              if ! npm run prod 2>/dev/null; then
                if ! npm run build:prod 2>/dev/null; then
                  if ! npm run build:production 2>/dev/null; then
                    if ! npm run build 2>/dev/null; then
                      echo "::error::No working build script found for $component_name"
                      return 1
                    fi
                  fi
                fi
              fi
            elif [ -f "gulpfile.js" ]; then
              echo "Using gulp for $component_name"
              if ! npm run build 2>/dev/null; then
                if ! gulp build 2>/dev/null; then
                  echo "::error::Gulp build failed for $component_name"
                  return 1
                fi
              fi
            elif [ -f "vite.config.js" ]; then
              echo "Using vite for $component_name"
              if ! npm run build 2>/dev/null; then
                if ! npx vite build 2>/dev/null; then
                  echo "::error::Vite build failed for $component_name"
                  return 1
                fi
              fi
            else
              # Try generic build scripts
              echo "Using generic build scripts for $component_name"
              if ! npm run prod 2>/dev/null; then
                if ! npm run build:prod 2>/dev/null; then
                  if ! npm run build:production 2>/dev/null; then
                    if ! npm run build 2>/dev/null; then
                      echo "::warning::No build script found for $component_name - skipping build"
                      return 0
                    fi
                  fi
                fi
              fi
            fi
            
            echo "Build completed successfully for $component_name"
            cd ../..
            return 0
          }
          
          # Build changed plugins
          echo "Building changed plugins..."
          for plugin_name in ${{ needs.setup.outputs.changed_plugins }}; do
            plugin_path="plugins/$plugin_name"
            if [ -d "$plugin_path" ]; then
              if ! build_component "plugin" "$plugin_name" "$plugin_path"; then
                echo "::error::Plugin build failed for $plugin_name"
                exit 1
              fi
            fi
          done
          
          echo "=== Plugin Build Process Completed Successfully ==="

      - name: Deploy plugins
        run: |
          SSH_USER="${{ needs.setup.outputs.ssh_user }}"
          PLUGINS_PATH="/www/wp-content/plugins"
          echo "Deploying plugins to $PLUGINS_PATH"
          
          # Deploy plugins with dry-run first
          echo "Performing dry run for plugins..."
          if ! rsync -avzn --update --stats \
            --include='composer.json' \
            --exclude='node_modules' \
            --exclude='.git' \
            --exclude='*.log' \
            --exclude='.env*' \
            --exclude='.vscode' \
            --exclude='.idea' \
            --exclude='*.sublime-*' \
            --exclude='.DS_Store' \
            --exclude='Thumbs.db' \
            --exclude='tests' \
            --exclude='.phpunit.xml' \
            --exclude='phpunit.xml.dist' \
            --exclude='.cache' \
            --exclude='.parcel-cache' \
            --exclude='.webpack-cache' \
            --exclude='.sass-cache' \
            --exclude='package-lock.json' \
            --exclude='composer.lock' \
            --exclude='.gitignore' \
            --exclude='.gitattributes' \
            --exclude='README.md' \
            --exclude='webpack.config.js' \
            --exclude='postcss.config.js' \
            --exclude='tailwind.config.js' \
            --exclude='babel.config.js' \
            --exclude='.eslintrc*' \
            --exclude='.prettierrc*' \
            --exclude='.stylelintrc*' \
            --exclude='src' \
            --exclude='assets/src' \
            ./plugins/ $SSH_USER@ssh.getflywheel.com:$PLUGINS_PATH; then
            echo "::error::Plugins dry run failed"
            exit 1
          fi
          echo "Plugins dry run successful."
          
          # Show what files will be deployed
          echo "Files to be deployed:"
          find ./plugins -type f -not -path "*/node_modules/*" -not -path "*/.git/*" -not -path "*/src/*" -not -path "*/assets/src/*" | head -20
          
          # Actual plugins deployment
          echo "Starting actual plugins deployment..."
          if ! rsync -avz --update --stats --compress --partial \
            --include='composer.json' \
            --exclude='node_modules' \
            --exclude='.git' \
            --exclude='*.log' \
            --exclude='.env*' \
            --exclude='.vscode' \
            --exclude='.idea' \
            --exclude='*.sublime-*' \
            --exclude='.DS_Store' \
            --exclude='Thumbs.db' \
            --exclude='tests' \
            --exclude='.phpunit.xml' \
            --exclude='phpunit.xml.dist' \
            --exclude='.cache' \
            --exclude='.parcel-cache' \
            --exclude='.webpack-cache' \
            --exclude='.sass-cache' \
            --exclude='package-lock.json' \
            --exclude='composer.lock' \
            --exclude='.gitignore' \
            --exclude='.gitattributes' \
            --exclude='README.md' \
            --exclude='webpack.config.js' \
            --exclude='postcss.config.js' \
            --exclude='tailwind.config.js' \
            --exclude='babel.config.js' \
            --exclude='.eslintrc*' \
            --exclude='.prettierrc*' \
            --exclude='.stylelintrc*' \
            --exclude='src' \
            --exclude='assets/src' \
            ./plugins/ $SSH_USER@ssh.getflywheel.com:$PLUGINS_PATH; then
            echo "::error::Plugins deployment failed"
            exit 1
          fi
          echo "Plugins deployment completed successfully."

  # Final verification and cleanup
  verify-and-cleanup:
    needs: [setup, deploy-themes, deploy-plugins]
    if: always()
    runs-on: ubuntu-latest
    environment: 
      name: ${{ github.event_name == 'pull_request' && (github.base_ref == 'production' && 'production' || 'staging') || (github.ref == 'refs/heads/production' && 'production' || 'staging') }}
      url: ${{ github.event_name == 'pull_request' && (github.base_ref == 'production' && 'https://stompinggroundcomedy.org' || 'https://sg.flywheelstaging.com') || (github.ref == 'refs/heads/production' && 'https://stompinggroundcomedy.org' || 'https://sg.flywheelstaging.com') }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Add Flywheel to known hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ssh.getflywheel.com >> ~/.ssh/known_hosts
          chmod 600 ~/.ssh/known_hosts

      - name: Verify Deployment
        run: |
          SSH_USER="${{ needs.setup.outputs.ssh_user }}"
          THEMES_PATH="/www/wp-content/themes"
          PLUGINS_PATH="/www/wp-content/plugins"
          echo "Verifying deployment..."
          
          # Check themes if deployed
          if [[ "${{ needs.setup.outputs.deploy_themes }}" == "true" ]]; then
            echo "Checking theme files..."
            if ! ssh $SSH_USER@ssh.getflywheel.com "ls -d $THEMES_PATH/*/ 2>/dev/null | head -1"; then
              echo "::error::No theme directories found"
              exit 1
            fi
            
            if ! ssh $SSH_USER@ssh.getflywheel.com "find $THEMES_PATH -name 'style.css' -type f | head -1"; then
              echo "::error::No style.css files found in themes"
              exit 1
            fi
            
            # Check for composer.json files in themes
            echo "Checking for composer.json files in deployed themes..."
            for theme_dir in themes/*/; do
              if [ -d "$theme_dir" ]; then
                theme_name=$(basename "$theme_dir")
                # Skip WordPress default themes
                if [[ "$theme_name" =~ ^(twentytwenty|twentytwentyone|twentytwentytwo|twentytwentythree|twentytwentyfour)$ ]]; then
                  echo "Skipping WordPress default theme: $theme_name"
                  continue
                fi
                
                echo "Checking theme: $theme_name"
                
                # Check for composer.json file
                if [ -f "themes/$theme_name/composer.json" ]; then
                  if ssh $SSH_USER@ssh.getflywheel.com "[ -f $THEMES_PATH/$theme_name/composer.json ]"; then
                    echo "✅ composer.json found for theme $theme_name"
                  else
                    echo "❌ composer.json NOT found for theme $theme_name (but exists locally)"
                  fi
                else
                  echo "ℹ️  No composer.json found locally for theme $theme_name"
                fi
              fi
            done
            
            echo "Theme verification successful."
          fi
          
          # Check plugins if deployed
          if [[ "${{ needs.setup.outputs.deploy_plugins }}" == "true" ]]; then
            echo "Checking plugin files..."
            if ! ssh $SSH_USER@ssh.getflywheel.com "ls -d $PLUGINS_PATH/*/ 2>/dev/null | head -1"; then
              echo "::error::No plugin directories found"
              exit 1
            fi
            
            # Check for built files in deployed plugins
            echo "Checking for built files in deployed plugins..."
            for plugin_dir in plugins/*/; do
              if [ -d "$plugin_dir" ]; then
                plugin_name=$(basename "$plugin_dir")
                echo "Checking plugin: $plugin_name"
                
                # Check for composer.json file
                if [ -f "plugins/$plugin_name/composer.json" ]; then
                  if ssh $SSH_USER@ssh.getflywheel.com "[ -f $PLUGINS_PATH/$plugin_name/composer.json ]"; then
                    echo "✅ composer.json found for $plugin_name"
                  else
                    echo "❌ composer.json NOT found for $plugin_name (but exists locally)"
                  fi
                else
                  echo "ℹ️  No composer.json found locally for $plugin_name"
                fi
                
                # Check for vendor directory only if composer.json exists
                if [ -f "plugins/$plugin_name/composer.json" ]; then
                  if ssh $SSH_USER@ssh.getflywheel.com "[ -d $PLUGINS_PATH/$plugin_name/vendor ]"; then
                    echo "✅ Vendor directory found for $plugin_name"
                    ssh $SSH_USER@ssh.getflywheel.com "ls -la $PLUGINS_PATH/$plugin_name/vendor/ | head -5"
                  else
                    echo "❌ Vendor directory NOT found for $plugin_name (but composer.json exists)"
                  fi
                else
                  echo "ℹ️  No composer.json found for $plugin_name - skipping vendor check"
                fi
              fi
            done
            echo "Plugin verification successful."
          fi
          
          echo "All deployed components verified successfully."

      - name: Rollback on Failure
        if: failure()
        run: |
          SSH_USER="${{ needs.setup.outputs.ssh_user }}"
          BACKUP_PATH="${{ needs.setup.outputs.backup_path }}"
          THEMES_PATH="/www/wp-content/themes"
          PLUGINS_PATH="/www/wp-content/plugins"
          
          echo "::error::Deployment failed! Initiating rollback..."
          echo "Rolling back from backup: $BACKUP_PATH"
          
          # Rollback only changed themes
          if [[ "${{ needs.setup.outputs.deploy_themes }}" == "true" ]]; then
            echo "Rolling back changed themes..."
            for theme_name in ${{ needs.setup.outputs.changed_themes }}; do
              echo "Rolling back theme: $theme_name"
              if ssh $SSH_USER@ssh.getflywheel.com "[ -d $BACKUP_PATH/$theme_name ]"; then
                if ssh $SSH_USER@ssh.getflywheel.com "rm -rf $THEMES_PATH/$theme_name && cp -r $BACKUP_PATH/$theme_name $THEMES_PATH/"; then
                  echo "Theme $theme_name rollback successful."
                else
                  echo "::error::Theme $theme_name rollback failed!"
                fi
              else
                echo "::warning::No backup found for theme $theme_name"
              fi
            done
          fi
          
          # Rollback only changed plugins
          if [[ "${{ needs.setup.outputs.deploy_plugins }}" == "true" ]]; then
            echo "Rolling back changed plugins..."
            for plugin_name in ${{ needs.setup.outputs.changed_plugins }}; do
              echo "Rolling back plugin: $plugin_name"
              if ssh $SSH_USER@ssh.getflywheel.com "[ -d $BACKUP_PATH/$plugin_name ]"; then
                if ssh $SSH_USER@ssh.getflywheel.com "rm -rf $PLUGINS_PATH/$plugin_name && cp -r $BACKUP_PATH/$plugin_name $PLUGINS_PATH/"; then
                  echo "Plugin $plugin_name rollback successful."
                else
                  echo "::error::Plugin $plugin_name rollback failed!"
                fi
              else
                echo "::warning::No backup found for plugin $plugin_name"
              fi
            done
          fi
          
          echo "Rollback completed. Previous versions restored."

      - name: Cleanup Backup
        if: always()
        run: |
          SSH_USER="${{ needs.setup.outputs.ssh_user }}"
          BACKUP_PATH="${{ needs.setup.outputs.backup_path }}"
          
          if [[ -n "$BACKUP_PATH" ]]; then
            echo "Cleaning up backup: $BACKUP_PATH"
            ssh $SSH_USER@ssh.getflywheel.com "rm -rf $BACKUP_PATH" || echo "Backup cleanup failed (non-critical)"
          fi 