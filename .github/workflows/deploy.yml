name: Deploy to Flywheel

on:
  push:
    branches:
      - main    # Production
      - staging # Staging environment

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: 
      name: ${{ github.ref == 'refs/heads/main' && 'production' || 'staging' }}
      url: ${{ github.ref == 'refs/heads/main' && 'https://stompinggroundcomedy.org' || 'https://sg.flywheelstaging.com' }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.1'
          tools: composer

      - name: Install Composer dependencies
        run: |
          echo "Installing Composer dependencies..."
          composer install --no-dev --optimize-autoloader --verbose || {
            echo "::error::Composer install failed. Check composer.json and composer.lock for errors."
            echo "::group::Composer Debug Info"
            composer diagnose
            composer show
            echo "::endgroup::"
            exit 1
          }
          echo "Composer dependencies installed successfully."

      # Commenting out Node.js and build steps until frontend build process is set up
      # - name: Setup Node.js
      #   uses: actions/setup-node@v3
      #   with:
      #     node-version: '18'
      #     cache: 'npm'

      # - name: Install NPM dependencies
      #   run: |
      #     echo "Installing NPM dependencies..."
      #     npm ci --verbose || {
      #       echo "::error::NPM install failed. Check package.json and package-lock.json for errors."
      #       echo "::group::NPM Debug Info"
      #       npm list
      #       npm config list
      #       echo "::endgroup::"
      #       exit 1
      #     }
      #     echo "NPM dependencies installed successfully."

      # - name: Build assets
      #   run: |
      #     echo "Building assets..."
      #     npm run build --verbose || {
      #       echo "::error::Asset build failed. Check webpack configuration and build scripts."
      #       echo "::group::Build Debug Info"
      #       npm run build --verbose
      #       echo "::endgroup::"
      #       exit 1
      #     }
      #     echo "Assets built successfully."

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Add Flywheel to known hosts
        run: |
          echo "Setting up SSH known hosts..."
          mkdir -p ~/.ssh
          ssh-keyscan -H ssh.getflywheel.com >> ~/.ssh/known_hosts
          chmod 600 ~/.ssh/known_hosts
          echo "SSH known hosts configured."

      - name: Test SSH Connection
        run: |
          echo "Testing SSH connection to Flywheel..."
          SSH_USER=${{ github.ref == 'refs/heads/main' && 'stompingground+stomping-ground' || 'stompingground+staging+stomping-ground' }}
          echo "Using SSH user: $SSH_USER"
          
          if ! ssh -v -o BatchMode=yes -o ConnectTimeout=5 $SSH_USER@ssh.getflywheel.com echo "SSH connection successful"; then
            echo "::error::SSH connection failed. Check SSH key and permissions."
            echo "::group::SSH Debug Info"
            ssh -v $SSH_USER@ssh.getflywheel.com
            echo "::endgroup::"
            exit 1
          fi
          echo "SSH connection successful."

      - name: Check Deployment Path
        run: |
          SSH_USER=${{ github.ref == 'refs/heads/main' && 'stompingground+stomping-ground' || 'stompingground+staging+stomping-ground' }}
          DEPLOY_PATH=${{ github.ref == 'refs/heads/main' && '/stompingground/stomping-ground' || '/stompingground/stomping-ground_staging' }}
          echo "Checking deployment path: $DEPLOY_PATH"
          
          if ! ssh -v $SSH_USER@ssh.getflywheel.com "[ -d $DEPLOY_PATH ]"; then
            echo "::error::Deployment path does not exist: $DEPLOY_PATH"
            echo "::group::Path Debug Info"
            ssh -v $SSH_USER@ssh.getflywheel.com "ls -la $(dirname $DEPLOY_PATH)"
            echo "::endgroup::"
            exit 1
          fi
          echo "Deployment path exists and is accessible."

      - name: Create Backup
        run: |
          SSH_USER=${{ github.ref == 'refs/heads/main' && 'stompingground+stomping-ground' || 'stompingground+staging+stomping-ground' }}
          TIMESTAMP=$(date +%Y%m%d_%H%M%S)
          DEPLOY_PATH=${{ github.ref == 'refs/heads/main' && '/stompingground/stomping-ground' || '/stompingground/stomping-ground_staging' }}
          BACKUP_PATH="/backups/backup_${TIMESTAMP}"
          
          echo "Creating backup at $BACKUP_PATH"
          if ! ssh -v $SSH_USER@ssh.getflywheel.com "mkdir -p $BACKUP_PATH && cp -r $DEPLOY_PATH/* $BACKUP_PATH/"; then
            echo "::error::Backup creation failed"
            echo "::group::Backup Debug Info"
            ssh -v $SSH_USER@ssh.getflywheel.com "ls -la /backups"
            echo "::endgroup::"
            exit 1
          fi
          echo "Backup created successfully."

      - name: Deploy to Flywheel
        run: |
          SSH_USER=${{ github.ref == 'refs/heads/main' && 'stompingground+stomping-ground' || 'stompingground+staging+stomping-ground' }}
          DEPLOY_PATH=${{ github.ref == 'refs/heads/main' && '/stompingground/stomping-ground' || '/stompingground/stomping-ground_staging' }}
          echo "Deploying to $DEPLOY_PATH"
          
          # Deploy with dry-run first
          echo "Performing dry run..."
          if ! rsync -avzn --delete --stats ./ $SSH_USER@ssh.getflywheel.com:$DEPLOY_PATH; then
            echo "::error::Dry run failed"
            echo "::group::Dry Run Debug Info"
            rsync -avzn --delete --stats --verbose ./ $SSH_USER@ssh.getflywheel.com:$DEPLOY_PATH
            echo "::endgroup::"
            exit 1
          fi
          echo "Dry run successful."
          
          # Actual deployment
          echo "Starting actual deployment..."
          if ! rsync -avz --delete --stats ./ $SSH_USER@ssh.getflywheel.com:$DEPLOY_PATH; then
            echo "::error::Deployment failed"
            echo "::group::Deployment Debug Info"
            rsync -avz --delete --stats --verbose ./ $SSH_USER@ssh.getflywheel.com:$DEPLOY_PATH
            echo "::endgroup::"
            exit 1
          fi
          echo "Deployment completed successfully."

      - name: Verify Deployment
        run: |
          SSH_USER=${{ github.ref == 'refs/heads/main' && 'stompingground+stomping-ground' || 'stompingground+staging+stomping-ground' }}
          DEPLOY_PATH=${{ github.ref == 'refs/heads/main' && '/stompingground/stomping-ground' || '/stompingground/stomping-ground_staging' }}
          echo "Verifying deployment..."
          
          # Check if critical files exist
          echo "Checking critical files..."
          if ! ssh -v $SSH_USER@ssh.getflywheel.com "[ -f $DEPLOY_PATH/wp-config.php ]"; then
            echo "::error::wp-config.php not found"
            echo "::group::File Check Debug Info"
            ssh -v $SSH_USER@ssh.getflywheel.com "ls -la $DEPLOY_PATH"
            echo "::endgroup::"
            exit 1
          fi
          
          if ! ssh -v $SSH_USER@ssh.getflywheel.com "[ -d $DEPLOY_PATH/wp-content/themes ]"; then
            echo "::error::themes directory not found"
            echo "::group::Directory Check Debug Info"
            ssh -v $SSH_USER@ssh.getflywheel.com "ls -la $DEPLOY_PATH/wp-content"
            echo "::endgroup::"
            exit 1
          fi
          
          if ! ssh -v $SSH_USER@ssh.getflywheel.com "[ -d $DEPLOY_PATH/wp-content/plugins ]"; then
            echo "::error::plugins directory not found"
            echo "::group::Directory Check Debug Info"
            ssh -v $SSH_USER@ssh.getflywheel.com "ls -la $DEPLOY_PATH/wp-content"
            echo "::endgroup::"
            exit 1
          fi
          
          echo "All critical files and directories verified successfully." 